// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"math"

	"github.com/gin-gonic/gin"
	"github.com/spf13/cast"
)

type Paginator struct {
	CurrentPage int         `json:"current_page"`
	PerPage     int         `json:"per_page"`
	LastPage    int         `json:"last_page"`
	Total       int         `json:"total"`
	Data        interface{} `json:"data"`
}

func (query *UserQuery) Paginate(ctx context.Context, c *gin.Context) (*Paginator, error) {
	page := cast.ToInt(c.Query("page"))
	perPage := cast.ToInt(c.Query("per_page"))
	if page < 1 {
		page = 1
	}
	if perPage < 1 {
		perPage = 15
	}
	offset := perPage * (page - 1)

	total, err := query.Clone().Count(ctx)
	if err != nil {
		return nil, err
	}
	var data interface{}
	data, err = query.Offset(offset).Limit(perPage).All(ctx)
	if err != nil {
		return nil, err
	}

	return &Paginator{
		Data:        data,
		Total:       total,
		PerPage:     perPage,
		CurrentPage: page,
		LastPage:    int(math.Ceil(float64(total) / float64(perPage))),
	}, nil
}
